// <auto-generated />
using System;
using Geo.Api.Repositories;
using Geo.Api.Repositories.Airports.Models;
using Geo.Api.Repositories.Cities.Models;
using Geo.Api.Repositories.Countries.Models;
using Geo.Api.Repositories.RailwayStations.Models;
using Geo.Api.Repositories.Regions.Models;
using Geo.Api.Repositories.SubwayStations.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Geo.Api.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Geo.Api.Repositories.Airports.Models.AirportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<AirportCodeEntity>("Code")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<AirportGeometryEntity>("Geometry")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("geometry");

                    b.Property<AirportNameEntity>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool>("NeedAutomaticUpdate")
                        .HasColumnType("boolean")
                        .HasColumnName("need_automatic_update");

                    b.Property<string>("Osm")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("osm");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<int?>("UtcOffset")
                        .HasColumnType("integer")
                        .HasColumnName("utc_offset");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Osm")
                        .IsUnique();

                    b.ToTable("airports", (string)null);
                });

            modelBuilder.Entity("Geo.Api.Repositories.Cities.Models.CityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("iata");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<CityGeometryEntity>("Geometry")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("geometry");

                    b.Property<CityNameEntity>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool>("NeedToUpdate")
                        .HasColumnType("boolean")
                        .HasColumnName("need_to_update");

                    b.Property<string>("Osm")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("osm");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<int?>("UtcOffset")
                        .HasColumnType("integer")
                        .HasColumnName("utc_offset");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("Osm")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("Geo.Api.Repositories.Countries.Models.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<CountryGeometryEntity>("Geometry")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("geometry");

                    b.Property<string>("Iso3116Alpha2Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("iso3116_alpha2");

                    b.Property<string>("Iso3166Alpha3Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("iso3166_alpha3");

                    b.Property<CountryNameEntity>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool>("NeedAutomaticUpdate")
                        .HasColumnType("boolean");

                    b.Property<string>("Osm")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("osm");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("phone_code");

                    b.Property<string>("PhoneMask")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone_mask");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Iso3116Alpha2Code")
                        .IsUnique();

                    b.HasIndex("Iso3166Alpha3Code")
                        .IsUnique();

                    b.HasIndex("Osm");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Geo.Api.Repositories.RailwayStations.Models.RailwayStationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<RailwayStationCodeEntity>("Code")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<RailwayStationGeometryEntity>("Geometry")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("geometry");

                    b.Property<RailwayStationNameEntity>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool>("NeedToUpdate")
                        .HasColumnType("boolean")
                        .HasColumnName("need_to_update");

                    b.Property<string>("Osm")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("osm");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<int?>("UtcOffset")
                        .HasColumnType("integer")
                        .HasColumnName("utc_offset");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Osm")
                        .IsUnique();

                    b.ToTable("railway_stations", (string)null);
                });

            modelBuilder.Entity("Geo.Api.Repositories.Regions.Models.RegionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<RegionGeometryEntity>("Geometry")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("geometry");

                    b.Property<RegionNameEntity>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool>("NeedToUpdate")
                        .HasColumnType("boolean");

                    b.Property<string>("Osm")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("osm");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<int?>("UtcOffset")
                        .HasColumnType("integer")
                        .HasColumnName("utc_offset");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("regions", (string)null);
                });

            modelBuilder.Entity("Geo.Api.Repositories.SubwayStations.Models.SubwayStationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<SubwayStationGeometryEntity>("Geometry")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("geometry");

                    b.Property<SubwayLineNameEntity>("LineName")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("line_name");

                    b.Property<bool>("NeedToUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("need_automatic_update");

                    b.Property<string>("Osm")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("osm");

                    b.Property<SubwayStationNameEntity>("StationName")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("station_name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Osm")
                        .IsUnique();

                    b.ToTable("subway_stations", (string)null);
                });

            modelBuilder.Entity("Geo.Api.Repositories.Airports.Models.AirportEntity", b =>
                {
                    b.HasOne("Geo.Api.Repositories.Cities.Models.CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Geo.Api.Repositories.Cities.Models.CityEntity", b =>
                {
                    b.HasOne("Geo.Api.Repositories.Countries.Models.CountryEntity", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Geo.Api.Repositories.Regions.Models.RegionEntity", null)
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Geo.Api.Repositories.RailwayStations.Models.RailwayStationEntity", b =>
                {
                    b.HasOne("Geo.Api.Repositories.Cities.Models.CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Geo.Api.Repositories.SubwayStations.Models.SubwayStationEntity", b =>
                {
                    b.HasOne("Geo.Api.Repositories.Cities.Models.CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });
#pragma warning restore 612, 618
        }
    }
}
